/*
Find Palindrome in Matrix
https://course.acciojob.com/idle?question=767e82d2-2a32-481e-88f3-c4d78ffdbfc3
 */
import java.io.*;
import java.util.*;

class Main
{
    public static void main(String args[])throws IOException
    {

        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int [][]a = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                a[i][j] = sc.nextInt();
            }
        }
        Solution ob=new Solution();
        String ans = ob.findPalindrome(a, m,n);
        System.out.println(ans);

    }
}


class Solution{

    String findPalindrome(int [][]a, int n,int m){
        // Variables:
        int palindromeInCol = palindromeCol(a,n,m);
        int palindromeInRow = palindromeRow(a,n,m);

        if(palindromeInCol != -1){
            String ans = palindromeInCol + " COL";
            return ans;
        }
        else if(palindromeInRow != -1){
            String ans = palindromeInRow + " ROW";
            return ans;
        }
        else{
            return "-1";
        }

    }

    private int palindromeCol(int[][] a, int n, int m) {
        int palindromeInCol = -1;

        // Iterating
        for (int col = 0; col < m; col++) {
            boolean isPalindrome = true;
            for (int row = 0, rowEnd = n-1; row < rowEnd; row++, rowEnd--) {
                // Checking is Palindrome in Column:
                if(a[row][col] != a[rowEnd][col]){
                    isPalindrome = false;
                    break;
                }
            }

            if(isPalindrome){
                palindromeInCol = palindromeInCol != -1 ? Math.min(palindromeInCol, col) : col;
            }
        }

        return palindromeInCol;
    }

    int palindromeRow(int [][]a, int n, int m){
        int palindromeInRow = -1;

        //Iterating
        for (int row = 0; row < n; row++) {
            boolean isPalindrome = true;
            for (int col = 0, colEnd = m-1; col < colEnd; col++, colEnd--) {
                // Checking is Palindrome in Column:
                if(a[row][col] != a[row][colEnd]){
                    isPalindrome = false;
                    break;
                }
            }

            if(isPalindrome){
                palindromeInRow = palindromeInRow != -1 ?Math.min(palindromeInRow, row): row;
            }
        }

        return palindromeInRow;
    }
}
