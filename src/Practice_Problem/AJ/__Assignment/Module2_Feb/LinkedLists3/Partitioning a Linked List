/*
Partitioning a Linked List
https://course.acciojob.com/idle?question=014a1af9-7d87-4ffb-9762-2ae93a586073
 */
import java.util.*;

class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data ){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node current = head;
        while(current.next !=null){
            current = current.next;
        }
        current.next = new_node;
    }
}

class Solution {
    public void partition(Node head, int x) {
        Node d1 = new Node(-1);
        Node d2 = new Node(-1);

        Node l1 = d1;
        Node l2 = d2;
        Node temp = head;
        while (temp != null) {
            if (temp.data < x) {
                l1.next = temp;
                l1 = temp;
            } else {
                l2.next = temp;
                l2 = temp;
            }
            temp = temp.next;
        }
        l1.next = null;
        l2.next = null;
        l1.next = d2.next;

        // Printing:
        Node t = d1.next;
        while (t != null) {
            System.out.print(t.data + " ");
            t = t.next;
        }
        System.out.println();
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList l1= new LinkedList();
        for(int i=0;i<n;i++){
            l1.add(sc.nextInt());
        }
        int x = sc.nextInt();
        Solution Ob = new Solution();
        Ob.partition(l1.head, x);
    }
}