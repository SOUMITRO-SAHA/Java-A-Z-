/*
Add two numbers represented by linked lists
https://course.acciojob.com/idle?question=f9ebb6a0-0789-4aea-bc82-d875b1b7ae88
 */
import java.util.*;
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        LinkedList a = new LinkedList();
        LinkedList b = new LinkedList();
        for(int i = 0; i < n; i++){
            a.add(input.nextInt());
        }
        for(int i = 0; i < m; i++){
            b.add(input.nextInt());
        }
        LinkedList ans = new LinkedList();
        ans.head = Solution.addTwoLinkedLists(a.head, b.head);
        ans.printList();

    }
}


class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
    void printList()
    {
        Node temp = head;
        while (temp != null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
        System.out.println();
    }

}


class Solution{
    private static Node reverse(Node head){
        Node prev = null;
        Node current = head;
        while (current != null) {
            Node nextNode = current.next;

            // Updating the References:
            current.next = prev;

            // Updating the Nodes
            prev = current;
            current = nextNode;
        }

        return prev;
    }
    public static Node addTwoLinkedLists(Node head1, Node head2)
    {
        head1 = reverse(head1);
        head2 = reverse(head2);

        Node ll_1 = head1;
        Node ll_2 = head2;
        // Creating a LL:
        LinkedList temp = new LinkedList();
        int carry = 0;
        int sum;
        while (ll_1 != null || ll_2 != null) {
            sum = carry;
            // Conditions
            if (ll_1 != null) {
                sum += ll_1.data;
                ll_1 = ll_1.next;
            }
            if (ll_2 != null) {
                sum += ll_2.data;
                ll_2 = ll_2.next;
            }

            // Adding the LL:
            temp.add(sum%10);
            carry = sum/10;
        }
        if (carry == 1) {
            temp.add(carry);
        }

        return reverse(temp.head);
    }

}